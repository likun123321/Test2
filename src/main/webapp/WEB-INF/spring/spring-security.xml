<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans.xsd   
http://www.springframework.org/schema/security  
http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<global-method-security pre-post-annotations="enabled" />
	<!-- 该路径下的资源不用过滤 -->
	<http pattern="/js/**" security="none" />
	<http pattern="/css/**" security="none" />
	<http pattern="/images/**" security="none" />
	<http pattern="/Gover/**" security="none" />
	<!--auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session). -->
	 <!--lowercase-comparisons：表示URL比较前先转为小写。 -->
	 <!--path-type：表示使用Apache Ant的匹配模式。 -->
	<!--access-denied-page：访问拒绝时转向的页面。 -->
	 <!--access-decision-manager-ref：指定了自定义的访问策略管理器。 -->

	<http use-expressions="true" auto-config="false" entry-point-ref="myAuthenticationEntryPoint" access-denied-page="/Gover/403">
			
		<!--login-page：指定登录页面。 -->
		<!-- login-processing-url：指定了客户在登录页面中按下 Sign In 按钮时要访问的 URL。 -->
		<!-- authentication-failure-url：指定了身份验证失败时跳转到的页面。 -->
		<!-- default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面。 -->
		<!-- always-use-default-target：指定了是否在身份验证通过后总是跳转到default-target-url属性指定的URL。 -->
		<!--logout-url：指定了用于响应退出系统请求的URL。其默认值为：/j_spring_security_logout。 -->
		<!-- logout-success-url：退出系统后转向的URL。 -->
		<!-- invalidate-session：指定在退出系统时是否要销毁Session。 -->
		<logout invalidate-session="false"
			logout-url="/loginOut" success-handler-ref="loginOutSuccessHandler" delete-cookies="JSESSIONID"/>		
			
		<!-- 实现免登陆验证 	-->
		<remember-me services-ref="rememberMeServices" />

		<!-- max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。 -->
		<!-- 此值表示：用户第二次登录时，前一次的登录信息都被清空。 -->
		<!-- exception-if-maximum-exceeded:默认为false， -->
		<!-- 当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。 -->

		<!-- <session-management invalid-session-url="/redirect"
			session-fixation-protection="none">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</session-management> -->
		<session-management	session-authentication-strategy-ref="sas" />
		<!-- 认证和授权 -->
		<custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</http>
	
	<!-- 自定义登出handler -->
	<beans:bean name = "loginOutSuccessHandler" class="com.assist.security.filter.LoginOutSuccessHandler" >      
	    <beans:property name="defaultTargetUrl" value = "/Gover/login"></beans:property>
	</beans:bean>
	
	<beans:bean id="rememberMeServices"  
            class="com.assist.security.filter.TokenRemember">
	    
	    <beans:property name="key" value="chinaylzl"/>  
	    <beans:property name="alwaysRemember" value="true" />  
	    <beans:property name="tokenValiditySeconds" value="-1"/>  
    	<beans:property name="userDetailsService" ref="myUserDetailServiceImpl"/> 
	</beans:bean>
	
	<beans:bean id="rememberMeFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<beans:property name="rememberMeServices" ref="rememberMeServices"/>
		<beans:property name="authenticationManager" ref="myAuthenticationManager"/>
	</beans:bean>
	
	<beans:bean id = "rememberMeAuthenticationProvider" class = "org.springframework.security.authentication.RememberMeAuthenticationProvider">
	    <beans:property name="key" value = "chinaylzl"></beans:property>	    
	</beans:bean>
	
	
		
	<!-- 未登录的切入点 -->
	<beans:bean id="myAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/Gover/403"></beans:property>
	</beans:bean>
	<!-- 登录验证器：用户有没有登录的资格该过滤器必须放在权限过滤器之前 -->
	<beans:bean id="myLoginFilter"
		class="com.assist.security.filter.LoginAuthenticationFilter">
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
		<beans:property name="authenticationSuccessHandler">
			<!--<beans:bean
				class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<beans:property name="defaultTargetUrl" value="/function/index" />
			</beans:bean> -->
			<!-- 自定义跳转 -->
		<beans:bean class = "com.assist.security.filter.MyUrlAuthenticationSuccessHandler"></beans:bean>
			
		</beans:property>
		<beans:property name="authenticationFailureHandler">
			<beans:bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<beans:property name="defaultFailureUrl" value="/Gover/login" />
			</beans:bean>
		</beans:property>
		<beans:property name="rememberMeServices" ref="rememberMeServices"></beans:property>
	</beans:bean>	
	
	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<!-- 防止session攻击 -->
		<beans:property name="alwaysCreateSession" value="true" />
		<beans:property name="migrateSessionAttributes" value="false" />
		<!-- 同一个帐号 同时只能一个人登录 -->
		<beans:property name="exceptionIfMaximumExceeded"
			value= "false" />
	</beans:bean>
	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />
	<!-- 事件监听:实现了ApplicationListener监听接口，包括AuthenticationCredentialsNotFoundEvent 
		事件， -->
	<!-- AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件 -->
	<beans:bean
		class="org.springframework.security.authentication.event.LoggerListener" />
	<!-- 自定义资源文件 提示信息 -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames" value="classpath:message_zh_CN">
		</beans:property>
	</beans:bean>
	<!-- 配置过滤器 -->
	<beans:bean id="myFilter" class="com.assist.security.filter.AssistSecurityFilter">
		<!-- 用户拥有的权限 -->
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<!-- 资源与权限对应关系 -->
		<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	</beans:bean>
	<!-- 实现了UserDetailsService的Bean -->
	<authentication-manager alias="myAuthenticationManager" erase-credentials="false">
		<authentication-provider user-service-ref="myUserDetailServiceImpl">
			<!-- 登入 密码 采用MD5加密 -->
			<password-encoder hash="md5" ref="passwordEncoder">
			</password-encoder>
		</authentication-provider>
		<authentication-provider ref="rememberMeAuthenticationProvider"/>

		
	</authentication-manager>
	
	<!-- 验证用户请求资源 是否拥有权限 -->
	<beans:bean id="myAccessDecisionManager"
		class="com.assist.security.filter.AssistAccessDecisionManager">
				<!-- 注入2个投票者 -->
		<beans:constructor-arg type="java.util.List">
        	<beans:list>  
            	<beans:ref bean="roleVoter"/>  
            	<beans:ref bean="authenticatedVoter"/>  
        	</beans:list>  
   		</beans:constructor-arg>
	</beans:bean>
		<!-- roleVoter为spring内置的一种权限决策方式 -->
	<beans:bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
		<!-- 修改权限前缀ROLE为"" -->
    	<beans:property name="rolePrefix" value=""></beans:property>  
	</beans:bean>  
  
	<beans:bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter" />
	
	<!-- 系统运行时加载 系统要拦截的资源 与用户请求时要过滤的资源 -->
	<beans:bean id="mySecurityMetadataSource" class="com.assist.security.filter.AssistSecurityMetadataSource">
	</beans:bean>
	<!-- 获取用户登入角色信息 -->
	<beans:bean id="myUserDetailServiceImpl" class="com.assist.security.filter.GovernmentDetailsService">
	</beans:bean>
	<!-- 用户的密码加密或解密 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
</beans:beans>  